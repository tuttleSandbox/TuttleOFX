Import( 'project' )
Import( 'libs' )

import os.path

project.StaticLibrary( 'tuttleCommon',
                       sources   = project.scanFiles( ['src/tuttle/common'] ),
                       includes  = ['src'],
                       libraries = [ libs.openfxHack,
                                     libs.boost,
                                    ],
                       shared = True
                      )

project.StaticLibrary( 'tuttlePlugin',
                       sources   = project.scanFiles( ['src/tuttle/plugin'] ),
                       includes  = ['src','src/tuttle/host/core'],
                       libraries = [ libs.tuttleCommon,
                                     libs.openfxPluginSupportHack,
                                     libs.boost,
                                    ],
                       shared = True
                      )

tuttleHostLibs = [ libs.tuttleCommon,
                   libs.openfxHack,
                   libs.dl,
                   libs.boost_filesystem,
                   libs.boost_serialization,
                   libs.boost_thread,
                   libs.boost_gil ]

if project.env['mode'] != 'production':
	tuttleHostLibs += [libs.png]

project.StaticLibrary( 'tuttleHost',
                       sources   = project.scanFiles( ['src/tuttle/host'] ),
                       includes  = ['src'],
                       libraries = tuttleHostLibs,
                       shared = True
                      )

pythonOutputDir = os.path.join(project.inOutputDir(),'python')

envSwig = project.createEnv( [libs.python, libs.tuttleHost, libs.pthread] )
envSwig.AppendUnique( SWIGFLAGS = ['-python','-c++','-Wall']) # ,'-shadow','-docstring'] )
envSwig.AppendUnique( SWIGPATH = envSwig['CPPPATH'] )
envSwig.AppendUnique( SWIGOUTDIR = pythonOutputDir )
envSwig.Replace( SHLIBPREFIX = '_' )
if project.macos:
	envSwig.Replace( SHLIBSUFFIX = '.so' ) # .dyLib not recognized

tuttlePython = project.SharedLibrary( target='tuttle',
                                      sources=['src/tuttle/host/tuttle.i'],
                                      env=envSwig,
                                      install=False,
                                     )

initFile = envSwig.Command( os.path.join( pythonOutputDir, '__init__.py' ), '',
                            [ Mkdir('${TARGET.dir}'),
                              Touch('$TARGET'),
                            ])
envSwig.Requires( tuttlePython, initFile )

tuttlePythonInstall = envSwig.Install( pythonOutputDir, tuttlePython )


envSwig.Alias( 'python', tuttlePythonInstall )



